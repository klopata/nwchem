      program lkjdfldjf

      real*8 a(0:29)
      data a(0:29)/1.516501714d0,  4.413532099d-1,-9.182135241d-2,
     >            -2.352754331d-2, 3.418828455d-2, 2.411870076d-3,
     >            -1.416381352d-2, 6.975895581d-4, 9.859205137d-3,
     >            -6.737855051d-3,-1.573330824d-3, 5.036146253d-3,
     >            -2.569472453d-3,-9.874953976d-4, 2.033722895d-3,
     >            -8.018718848d-4,-6.688078723d-4, 1.030936331d-3,
     >            -3.673838660d-4,-4.213635394d-4,5.761607992d-4,
     >            -8.346503735d-5,-4.458447585d-4,4.601290092d-4,
     >            -5.231775398d-6,-4.239570471d-4,3.750190679d-4,
     >             2.114938125d-5, -1.904911565d-4,7.384362421d-5/

      integer i

      do i=0,29
         write(*,*) "i,a=",i,a(i)
      end do

      stop
      end

*    ************************************
*    *                                  *
*    *        gen_BEEF_xc_restricted    *
*    *                                  *
*    ************************************

*   This routine calculates the non-Langreth terms of the BEEF-vdw exchange-correlation 
*   potential(xcp) and energy density(xce).
*
*
*   Entry - n2ft3d     : number of grid points
*           rho_in(*) :  density (nup+ndn)
*           agr_in(*): |grad rho_in|
*           x_parameter: scale parameter for exchange
*           c_parameter: scale parameter for correlation
*
*     Exit  - xce(n2ft3d) : PBE96 exchange correlation energy density
*             fn(n2ft3d)  : d(n*xce)/dn
*             fdn(n2ft3d) : d(n*xce/d|grad n|
*
      subroutine gen_BEEF_xc_restricted(n2ft3d,rho_in,agr_in,
     >                                x_parameter,c_parameter,
     >                                xce,fn,fdn)
*
      implicit none
      integer    n2ft3d
      real*8     rho_in(n2ft3d)
      real*8     agr_in(n2ft3d)
      real*8     x_parameter,c_parameter
      real*8     xce(n2ft3d)
      real*8     fn(n2ft3d)
      real*8     fdn(n2ft3d)

*     **** Density cutoff parameter ****
      real*8 DNS_CUT,ETA
      parameter (DNS_CUT = 1.0d-20)
      parameter (ETA     = 1.0d-20)

c     ***** PBE96 GGA exchange constants ******
      real*8 MU,KAPPA
      parameter (MU    = 0.2195149727645171d0)
      parameter (KAPPA = 0.8040000000000000d0)

c     ****** PBE96 GGA correlation constants ******
      real*8 GAMMA,BETA,BOG
      parameter (GAMMA  = 0.031090690869655d0)
      parameter (BETA   = 0.066724550603149d0)
      parameter (BOG    = BETA/GAMMA)

c     ****** Perdew-Wang92 LDA correlation coefficients *******
      real*8 GAM,iGAM,FZZ,iFZZ
      parameter (GAM    = 0.519842099789746329d0)
      parameter (iGAM   = 1.0d0/GAM)
      parameter (FZZ    = (8.0d0/(9.0d0*GAM)) )
      parameter (iFZZ    = 0.125d0*9.0d0*GAM)

      real*8 A_1,A1_1,B1_1,B2_1,B3_1,B4_1
      parameter (A_1  = 0.0310907d0)
      !parameter (A_1  = 0.031091d0)
      parameter (A1_1 = 0.2137000d0)
      parameter (B1_1 = 7.5957000d0)
      parameter (B2_1 = 3.5876000d0)
      parameter (B3_1 = 1.6382000d0)
      parameter (B4_1 = 0.4929400d0)

      real*8 A_2,A1_2,B1_2,B2_2,B3_2,B4_2
      parameter (A_2  =  0.01554535d0)
      !parameter (A_2  =  0.015545d0)
      parameter (A1_2 =  0.20548000d0)
      parameter (B1_2 = 14.11890000d0)
      parameter (B2_2 =  6.19770000d0)
      parameter (B3_2 =  3.36620000d0)
      parameter (B4_2 =  0.62517000d0)

      real*8 A_3,A1_3,B1_3,B2_3,B3_3,B4_3
      parameter (A_3  =  0.0168869d0)
      !parameter (A_3  =  0.016887d0)
      parameter (A1_3 =  0.1112500d0)
      parameter (B1_3 = 10.3570000d0)
      parameter (B2_3 =  3.6231000d0)
      parameter (B3_3 =  0.8802600d0)
      parameter (B4_3 =  0.4967100d0)

c     **** other constants ****
      real*8 onethird,fourthird,fivethird,onesixthm
      real*8 twothird,sevensixthm
      real*8 onethirdm
      parameter (onethird=1.0d0/3.0d0)
      parameter (onethirdm=-1.0d0/3.0d0)
      parameter (twothird=2.0d0/3.0d0)
      parameter (fourthird=4.0d0/3.0d0)
      parameter (fivethird=5.0d0/3.0d0)
      parameter (onesixthm=-1.0d0/6.0d0)
      parameter (sevensixthm=-7.0d0/6.0d0)

*---- Beef expansion parameters given by Wellendorff et al-----------------*
      real*8 alphac,malphac
      parameter (alphac=0.6001664769d0)
      parameter (malphac=1.0d0-alphac)
      real*8 a(0:29)
      data a(0:29)/1.516501714d0,  4.413532099d-1,-9.182135241d-2,
     >            -2.352754331d-2, 3.418828455d-2, 2.411870076d-3,
     >            -1.416381352d-2, 6.975895581d-4, 9.859205137d-3,
     >            -6.737855051d-3,-1.573330824d-3, 5.036146253d-3,
     >            -2.569472453d-3,-9.874953976d-4, 2.033722895d-3,
     >            -8.018718848d-4,-6.688078723d-4, 1.030936331d-3,
     >            -3.673838660d-4,-4.213635394d-4,5.761607992d-4,
     >            -8.346503735d-5,-4.458447585d-4,4.601290092d-4,
     >            -5.231775398d-6,-4.239570471d-4,3.750190679d-4,
     >             2.114938125d-5, -1.904911565d-4,7.384362421d-5/

      real*8 p0,p1,p2,dp,s2,oneovers2


      pi         = 4.0d0*datan(1.0d0)
      rs_scale   = (0.75d0/pi)**onethird
      fdnx_const = -3.0d0/(8.0d0*pi)

!$OMP DO
      do i=1,n2ft3d
         n     = rho_in(i)+ETA
         agr   = agr_in(i)

c        ***** calculate unpolarized Exchange energies and potentials *****
         n_onethird = (3.0d0*n/pi)**onethird
         ex_lda     = -0.75d0*n_onethird

         kf = (3.0d0*pi*pi*n)**onethird
         s  = agr/(2.0d0*kf*n)

         t    = 2.0d0*s*s/(4.0d0+s*s) - 1.0d0
         F    = 0.0d0
         Ft = 0.0d0
         s2   = t*t - 1.0d0
         if (dabs(s2).lt.1.0d-12) then
            do i=0,n
               F    = F + a(i)
               dFdt = dFdt + a(i)*0.5d0*dbl(i*(i+1))
            end do
         else
            oneovers2 = 1.0d0/s2
            p0 = 1.0d0
            dp = 0
            p1 = t
            dp = 1.0d0
            do i=2,n
               p2    = (1.0d0/dble(i+1))*((2*i+1)*t*p1 - dble(i)*p0)
               dp2   = dble(i)*oneovers2*(t*p2-p1)
               F  = F + a(i)*p2
               Ft = dFdt + a(i)*dp2
               p0 = p1
               p1 = p2
            end do
         end if

         Fs  = (16.0d0*s/(4.0d0+s*s)**2)*Ft

         ex   = ex_lda*F
         fnx  = fourthird*(ex - ex_lda*Fs*s)
         fdnx = fdnx_const*Fs




*        *********************************************************************
c        ***** calculate unpolarized correlation energies and potentials *****
*        *********************************************************************

c        **** calculate rs and t ****
         rs    = rs_scale/(n**onethird)
         rss   = dsqrt(rs)

         kf = (3.0d0*pi*pi*n)**onethird
         ks = dsqrt(4.0d0*kf/pi)
         t  = agr/(2.0d0*ks*n)


c        **** unpolarized LDA correlation energy ****
c        **** ec_p = correlation energy          ****
c        ****   ec_p_rs = dec_p/drs              ****
c        ****   uc_p    = dec_p/dn               ****
         call LSDT(A_1,A1_1,B1_1,B2_1,B3_1,B4_1,rss,ec_lda,ec_lda_rs)
c        **** PBE96 correlation energy  corrections ****
         t2 = t*t
         t4 = t2*t2
         B = -ec_lda/GAMMA
         B = BOG/(exp(B)-1.0d0+ETA)
         Q4 = 1.0d0 + B*t2
         Q5 = 1.0d0 + B*t2 + B*B*t4
         H = GAMMA*dlog(1.0d0 + BOG*Q4*t2/Q5)


c        **** PBE96 correlation fdn and fdnc derivatives ****
         t6   = t4*t2

         B_ec = (B/BETA)*(BOG+B)

         Q8  = Q5*Q5+BOG*Q4*Q5*t2
         Q9  = 1.0d0+2*B*t2
         H_B  = -BETA*B*t6*(2.0d0+B*t2)/Q8
         Hrs  = H_B*B_ec*ec_lda_rs

         Ht  = 2.0d0*BETA*Q9/Q8*t

         ec   = ec_lda + malphac*H
         fnc  = ec  - (onethird*rs*ec_lda_rs)
     >             - malphac*(onethird*rs*Hrs)
     >             - malphac*(sevensixths*t*Ht))
         fdnc = malphac*(0.5d0* Ht/ks)
      
         xce(i) = x_parameter*ex   + c_parameter*ec
         fn(i)  = x_parameter*fnx  + c_parameter*fnc
         fdn(i) = x_parameter*fdnx + c_parameter*fdnc

      end do
!$OMP END DO

      return
      end




      F    = 0.0d0
      dFdt = 0.0d0
      s2   = t*t - 1.0d0
      if (dabs(s2).lt.1.0d-12) then
         do i=0,n
            F    = F + a(i)
            dFdt = dFdt + a(i)*0.5d0*dbl(i*(i+1))
         end do
      else
         oneovers2 = 1.0d0/s2
         p0 = 1.0d0
         dp = 0
         p1 = t
         dp = 1.0d0

         do i=2,n
            p2    = (*1.0d0/dble(i+1))*((2*i+1)*t*p1 - dble(i)*p0)
            dp2   = dble(i)*oneovers2*(t*p2-p1)
            F  = F + a(i)*p2
            dFdt = dFdt + a(i)*dp2
            p0 = p1
            p1 = p2
         end do
      end if
      return
      end 
